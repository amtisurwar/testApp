{
  "@react-native-community/bob": {
    "source": "src",
    "output": "lib",
    "targets": [
      "commonjs",
      "module",
      "typescript"
    ]
  },
  "_args": [
    [
      {
        "raw": "react-native-device-info",
        "scope": null,
        "escapedName": "react-native-device-info",
        "name": "react-native-device-info",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/myzealit/Desktop/kausar/testApp"
    ]
  ],
  "_from": "react-native-device-info",
  "_hasShrinkwrap": false,
  "_id": "react-native-device-info@5.4.1",
  "_location": "/react-native-device-info",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-device-info_5.4.1_1578598830355_0.4281644061752867"
  },
  "_npmUser": {
    "name": "mikehardy",
    "email": "npmjs@mikehardy.net"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-device-info",
    "scope": null,
    "escapedName": "react-native-device-info",
    "name": "react-native-device-info",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-device-info/-/react-native-device-info-5.4.1.tgz",
  "_shasum": "507d2cd4be98813fc0421a35731b471b86ca194d",
  "_shrinkwrap": null,
  "_spec": "react-native-device-info",
  "_where": "/Users/myzealit/Desktop/kausar/testApp",
  "author": {
    "name": "Rebecca Hughes",
    "email": "rebecca@learnium.net",
    "url": "https://github.com/rebeccahughes"
  },
  "bugs": {
    "url": "https://github.com/react-native-community/react-native-device-info/issues"
  },
  "contributors": [
    {
      "name": "Gant Laborde",
      "email": "gant@infinite.red",
      "url": "https://github.com/gantman"
    },
    {
      "name": "Mehdi Achour",
      "email": "machour@gmail.com",
      "url": "https://github.com/machour"
    },
    {
      "name": "Mike Hardy",
      "email": "github@mikehardy.net",
      "url": "https://github.com/mikehardy"
    }
  ],
  "dependencies": {},
  "description": "Get device information using react-native",
  "devDependencies": {
    "@react-native-community/bob": "^0.7.0",
    "@react-native-community/eslint-config": "0.0.5",
    "@types/react": "^16.9.11",
    "@types/react-native": "^0.60.22",
    "eslint": "^6.6.0",
    "eslint-plugin-prettier": "^3.1.1",
    "husky": "^3.1.0",
    "lint-staged": "^9.4.3",
    "np": "^5.1.3",
    "prettier": "^1.19.1",
    "react": "^16.12.0",
    "react-native": "^0.61.4",
    "typescript": "^3.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "507d2cd4be98813fc0421a35731b471b86ca194d",
    "integrity": "sha512-eb1fadKkaCy0C6p2gozGQ6vHO+rhQBh1FTN+l7pE23McfI7EKtp6Wy7OCexHvmEe6xsxoHK93cMiCsZuyaTnMA==",
    "tarball": "https://registry.npmjs.org/react-native-device-info/-/react-native-device-info-5.4.1.tgz",
    "fileCount": 116,
    "unpackedSize": 653778,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeF4GuCRA9TVsSAnZWagAAAbIP/1xNatpsBP7PJEFk7xa4\ndXVGhYEKWGLsRth9ysMhEDNt5TLQOrng4S9hQDuEnXFTlMqNF8kWHSsRbIZH\nd0KPUFC8c78H4UNgGZzN8YHJq8QNByy3AbnQtyQRpQZyg3Jq1fR5dGyvYR5W\n5AYat6JEO0iqliE3mOzPibHiczgGQaPuf++xssK6nbBbfOFBevE8EtGpp4yN\n7uPnrZCMyvYC1N+j+Xo1AD2IKsLOQ0MexSbE5ta5raDkyafYKHKmYVy2rsWI\ngEEcvrykUjMzU18F9RvfR6ctXWr/Cgf12iZhg2csxlwGZ4zOAT/woFF6ZVrb\nA6Kvwa11uYpjX7TLaEtTKyDNHQFfIGAg/EmrpitVtoIJshYFiagr7FXi1yxi\nUQp0q29LytbP7Dbc3cEkMkrt4Xo1XS4t71ijMcGbFzbaMBZrlP0p3yk5irpk\nVzaM5SuKGPtA2Issy6wn6nqIu6xoYrz5MszJMW40mC6PnwW3h6EcK3T7Bc1i\nwznRWN91l2+Vpb6Ryrf0c1FxvSyFIgR6oAla9qQtvnPpN/RQkbrCDKHDpjBh\nqEzZnTt8gtxZw5i8fyt00N1vC55SLuvuAQVojGA213+6rEGKXK9QEe07aN2q\njKxx0xbvt0qMRjSpOs73r7Q5JE9sSzuG3bv9hQWUn5qt6jUbIw7b+pc1eDVY\nAh8A\r\n=2GkV\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "@react-native-community"
  },
  "files": [
    "android/",
    "ios/",
    "lib/",
    "src/",
    "web/",
    "windows/",
    "RNDeviceInfo.podspec"
  ],
  "homepage": "https://github.com/react-native-community/react-native-device-info#readme",
  "keywords": [
    "react-component",
    "react-native",
    "ios",
    "android",
    "windows",
    "device",
    "events",
    "cocoapod"
  ],
  "license": "MIT",
  "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Rebecca Hughes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "lint-staged": {
    "*.ts": [
      "yarn lint",
      "git add"
    ]
  },
  "main": "lib/commonjs/index.js",
  "maintainers": [
    {
      "name": "gantman",
      "email": "gantman+npm@gmail.com"
    },
    {
      "name": "jeroenbourgois",
      "email": "info@jeroenbourgois.be"
    },
    {
      "name": "lilach",
      "email": "i.am.red@gmail.com"
    },
    {
      "name": "machour",
      "email": "machour@gmail.com"
    },
    {
      "name": "rebeccahughes",
      "email": "rebeccahughes1@outlook.com"
    }
  ],
  "module": "lib/module/index.js",
  "name": "react-native-device-info",
  "optionalDependencies": {},
  "react-native": "src/index.ts",
  "readme": "<!-- markdownlint-disable MD024 MD034 MD033 -->\n\n# react-native-device-info\n\n[![npm version](https://badge.fury.io/js/react-native-device-info.svg)](http://badge.fury.io/js/react-native-device-info)\n[![npm total downloads](https://img.shields.io/npm/dt/react-native-device-info.svg)](https://img.shields.io/npm/dt/react-native-device-info.svg)\n[![npm monthly downloads](https://img.shields.io/npm/dm/react-native-device-info.svg)](https://img.shields.io/npm/dm/react-native-device-info.svg)\n[![npm weekly downloads](https://img.shields.io/npm/dw/react-native-device-info.svg)](https://img.shields.io/npm/dw/react-native-device-info.svg)\n\nDevice Information for [React Native](https://github.com/facebook/react-native).\n\n## TOC\n\n- [v2 to v3 Upgrade](#v2-to-v3-upgrade)\n- [v3 to v4 Upgrade](#v3-to-v4-upgrade)\n- [Installation](#installation)\n- [Linking](#linking-for-react-native--059-only-react-native--060-skip-this-as-auto-linking-should-work)\n- [Usage](#usage)\n- [API](#api)\n- [Troubleshooting](#troubleshooting)\n- [Release Notes](#release-notes)\n- [react-native-dom / react-native-web](#react-native-dom)\n\n## v2 to v3 upgrade\n\nIf you are upgrading from v2 to v3, check the guide out: https://github.com/react-native-community/react-native-device-info/wiki/V2-to-V3-Migration-Guide\n\n## v3 to v4 upgrade\n\nFor those upgrading to v4, follow the v2 to v3 guide first, then follow this: https://github.com/react-native-community/react-native-device-info/wiki/V3-to-V4-Migration-Guide\n\n## Installation\n\nUsing npm:\n\n```shell\nnpm install --save react-native-device-info\n```\n\nor using yarn:\n\n```shell\nyarn add react-native-device-info\n```\n\n> ⚠️ If you are on React Native > 0.47, you must use version 0.11.0 of this library or higher\n\n## AndroidX Support\n\nThis module defaults to AndroidX you should configure your library versions similar to this in your `android/build.gradle` file's \"ext\" block\n\n<details>\n    <summary>Android</summary>\n\n```gradle\n...\n  ext {\n    // dependency versions\n\n    We have 3 options for deviceId:\n    //Option 1 (latest):\n    firebaseIidVersion = \"19.0.1\" // default: \"19.0.1\"\n    //Option 2 (legacy GooglePlay dependency but using AndroidX):\n    googlePlayServicesIidVersion = \"17.0.0\" // default: \"17.0.0\" - AndroidX\n    //Option 3 (legacy GooglePlay dependency before AndroidX):\n    googlePlayServicesIidVersion = \"16.0.1\"\n\n\n    //include as needed:\n    compileSdkVersion = \"28\" // default: 28 (28 is required for AndroidX)\n    targetSdkVersion = \"28\" // default: 28 (28 is required for AndroidX)\n    supportLibVersion = '1.0.2' // Use '28.0.0' or don't specify for old libraries, '1.0.2' or similar for AndroidX\n    mediaCompatVersion = '1.0.1' // Do not specify if using old libraries, specify '1.0.1' or similar for androidx.media:media dependency\n    supportV4Version = '1.0.0' // Do not specify if using old libraries, specify '1.0.0' or similar for androidx.legacy:legacy-support-v4 dependency\n  }\n...\n```\n\n</details>\n\nIf you need non-AndroidX you will need to use the jetifier package in reverse mode, documentation available with that package.\n\n## Linking (for React Native <= 0.59 only, React Native >= 0.60 skip this as auto-linking should work)\n\n### Automatic\n\n```shell\nreact-native link react-native-device-info\n```\n\n(or using [`rnpm`](https://github.com/rnpm/rnpm) for versions of React Native < 0.27)\n\n```shell\nrnpm link react-native-device-info\n```\n\n_For iOS users using Pods_\nYou still need to run `pod install` after running the above link command inside your `IOS` folder.\n\n### Manual\n\n<details>\n    <summary>iOS (via CocoaPods) RN <= 59 </summary>\n\nRN <= 59: [`Bug`](https://github.com/react-native-community/react-native-device-info/issues/748)\n\n```\nmv ios/Podfile .\nreact-native link react-native-device-info\nmv Podfile ios\n```\n\nDo _not_ append `pod 'RNDeviceInfo', :path => '../node_modules/react-native-device-info'` to the Podfile\n\n</details>\n\n<details>\n    <summary>iOS (via CocoaPods) RN >= 60</summary>\n\nAdd the following lines to your build targets in your `Podfile`\n\n```ruby\npod 'React', :path => '../node_modules/react-native'\n\n# Explicitly include Yoga if you are using RN >= 0.42.0\npod 'yoga', :path => '../node_modules/react-native/ReactCommon/yoga'\n\npod 'RNDeviceInfo', :path => '../node_modules/react-native-device-info'\n\n# React-Native is not great about React double-including from the Podfile\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    if target.name == \"React\"\n      target.remove_from_project\n    end\n\n    # It removes React & Yoga from the Pods project, as it is already included in the main project.\n    targets_to_ignore = %w(React yoga)\n    if targets_to_ignore.include? target.name\n      target.remove_from_project\n    end\n  end\nend\n```\n\nThen run `pod install`\n\n</details>\n\n<details>\n    <summary>iOS (without CocoaPods)</summary>\n\nIn XCode, in the project navigator:\n\n- Right click _Libraries_\n- Add Files to _[your project's name]_\n- Go to `node_modules/react-native-device-info/ios`\n- Add the file `RNDeviceInfo.xcodeproj`\n\nIn XCode, in the project navigator, select your project.\n\n- Add the `libRNDeviceInfo.a` from the _deviceinfo_ project to your project's _Build Phases ➜ Link Binary With Libraries_\n- Click `.xcodeproj` file you added before in the project navigator and go the _Build Settings_ tab. Make sure _All_ is toggled on (instead of _Basic_).\n- Look for _Header Search Paths_ and make sure it contains both `$(SRCROOT)/../react-native/React` and `$(SRCROOT)/../../React`\n- Mark both as recursive (should be OK by default).\n\nRun your project (Cmd+R)\n\n(Thanks to @brysgo for writing the instructions)\n\n</details>\n\n<details>\n    <summary>Android</summary>\n\n- **_optional_** in `android/build.gradle`:\n\n```gradle\n...\n  ext {\n    // dependency versions\n    googlePlayServicesVersion = \"<Your play services version>\" // default: \"16.1.0\" - pre-AndroidX, override for AndroidX\n    compileSdkVersion = \"<Your compile SDK version>\" // default: 28\n    targetSdkVersion = \"<Your target SDK version>\" // default: 28\n  }\n...\n```\n\n- in `android/app/build.gradle`:\n\n```diff\ndependencies {\n    ...\n    implementation \"com.facebook.react:react-native:+\"  // From node_modules\n+   implementation project(':react-native-device-info')\n}\n```\n\n- in `android/settings.gradle`:\n\n```diff\n...\ninclude ':app'\n+ include ':react-native-device-info'\n+ project(':react-native-device-info').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-device-info/android')\n```\n\n#### With React Native 0.29+\n\n- in `MainApplication.java`:\n\n```diff\n+ import com.learnium.RNDeviceInfo.RNDeviceInfo;\n\n  public class MainApplication extends Application implements ReactApplication {\n    //......\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n+         new RNDeviceInfo(),\n          new MainReactPackage()\n      );\n    }\n\n    ......\n  }\n```\n\n#### With older versions of React Native\n\n- in `MainActivity.java`:\n\n```diff\n+ import com.learnium.RNDeviceInfo.RNDeviceInfo;\n\n  public class MainActivity extends ReactActivity {\n    ......\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n+       new RNDeviceInfo(),\n        new MainReactPackage()\n      );\n    }\n  }\n```\n\nNOTE: If you faced with this error: `Could not resolve all files for configuration ':react-native-device-info:debugCompileClasspath'.`, in `build.gradle` put `google()` in the first line (according to https://stackoverflow.com/a/50748249)\n\n- in `android/build.gradle`:\n\n```diff\nallprojects {\n    repositories {\n+       google()\n        ...\n    }\n}\n```\n\n(Thanks to @chirag04 for writing the instructions)\n\n</details>\n\n<details>\n    <summary>Windows</summary>\n\n- Open the solution in Visual Studio for your Windows apps\n- right click your in the Explorer and click Add > Existing Project...\n- Navigate to `./<app-name>/node_modules/react-native-device-info/windows/RNDeviceInfo` and add `RNDeviceInfo.csproj`\n- this time right click on your React Native Windows app under your solutions directory and click Add > Reference...\n- check the `RNDeviceInfo` you just added and press ok\n- open up `MainReactNativeHost.cs` for your app and edit the file like so:\n\n```diff\n+ using RNDeviceInfo;\n......\n        protected override List<IReactPackage> Packages => new List<IReactPackage>\n        {\n            new MainReactPackage(),\n+           new RNDeviceInfoPackage(),\n        };\n```\n\n(Thanks to @josephan for writing the instructions)\n\n</details>\n\n## Usage\n\n```js\nimport DeviceInfo from 'react-native-device-info';\n\n// or ES6+ destructured imports\n\nimport { getUniqueId, getManufacturer } from 'react-native-device-info';\n```\n\n## API\n\nNote that many APIs are platform-specific. If there is no implementation for a platform, then the \"default\" return values you will receive are 'unknown' for string, '-1' for number, and 'false' for boolean. Arrays and Objects will be empty ('[]' and '{}' respectively).\n\nEvery API returns a Promise but also has a corresponding API with 'Sync' on the end that operates synchronously. For example, you may prefer to call 'isCameraPresentSync()' during your app bootstrap to avoid async calls during the first parts of app startup.\n\n| Method                                                            | Return Type         |  iOS | Android | Windows | Web |\n| ----------------------------------------------------------------- | ------------------- | :--: | :-----: | :-----: | :-: |\n| [getAndroidId()](#getandroidid)                                   | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getApiLevel()](#getapilevel)                                     | `Promise<number>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getApplicationName()](#getapplicationname)                       | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getAvailableLocationProviders()](#getAvailableLocationProviders) | `Promise<Object>`   |  ✅  |   ✅    |   ❌    | ❌ |\n| [getBaseOs()](#getbaseOs)                                         | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ✅ |\n| [getBuildId()](#getbuildid)                                       | `Promise<string>`   |  ✅  |   ✅    |   ❌    | ❌ |\n| [getBatteryLevel()](#getbatterylevel)                             | `Promise<number>`   |  ✅  |   ✅    |   ✅    | ✅ |\n| [getBootloader()](#getbootloader)                                 | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getBrand()](#getbrand)                                           | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getBuildNumber()](#getbuildnumber)                               | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getBundleId()](#getbundleid)                                     | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [isCameraPresent()](#iscamerapresent)                             | `Promise<boolean>`  |  ❌  |   ✅    |   ✅    | ✅ |\n| [getCarrier()](#getcarrier)                                       | `Promise<string>`   |  ✅  |   ✅    |   ❌    | ❌ |\n| [getCodename()](#getcodename)                                     | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getDevice()](#getdevice)                                         | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getDeviceId()](#getdeviceid)                                     | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getDeviceType()](#getDeviceType)                                 | `string`            |  ✅  |   ✅    |   ❌    | ❌ |\n| [getDisplay()](#getdisplay)                                       | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getDeviceName()](#getdevicename)                                 | `Promise<string>`   |  ✅  |   ✅    |   ✅    | ❌ |\n| [getDeviceToken()](#getdevicetoken)                               | `Promise<string>`   |  ✅  |   ❌    |   ❌    | ❌ |\n| [getFirstInstallTime()](#getfirstinstalltime)                     | `Promise<number>`   |  ❌  |   ✅    |   ✅    | ❌ |\n| [getFingerprint()](#getfingerprint)                               | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getFontScale()](#getfontscale)                                   | `Promise<number>`   |  ✅  |   ✅    |   ❌    | ❌ |\n| [getFreeDiskStorage()](#getfreediskstorage)                       | `Promise<number>`   |  ✅  |   ✅    |   ❌    | ✅ |\n| [getHardware()](#gethardware)                                     | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getHost()](#gethost)                                             | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getIpAddress()](#getipaddress)                                   | `Promise<string>`   |  ✅  |   ✅    |   ✅    | ❌ |\n| [getIncremental()](#getincremental)                               | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getInstallReferrer()](#getinstallreferrer)                       | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ✅ |\n| [getInstanceId()](#getinstanceid)                                 | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getLastUpdateTime()](#getlastupdatetime)                         | `Promise<number>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getMacAddress()](#getmacaddress)                                 | `Promise<string>`   |  ✅  |   ✅    |   ❌    | ❌ |\n| [getManufacturer()](#getmanufacturer)                             | `Promise<string>`   |  ✅  |   ✅    |   ✅    | ❌ |\n| [getMaxMemory()](#getmaxmemory)                                   | `Promise<number>`   |  ❌  |   ✅    |   ✅    | ✅ |\n| [getModel()](#getmodel)                                           | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getPhoneNumber()](#getphonenumber)                               | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getPowerState()](#getpowerstate)                                 | `Promise<object>`   |  ✅  |   ✅    |   ❌    | ✅ |\n| [getProduct()](#getproduct)                                       | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getPreviewSdkInt()](#getPreviewSdkInt)                           | `Promise<number>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getReadableVersion()](#getreadableversion)                       | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getSerialNumber()](#getserialnumber)                             | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getSecurityPatch()](#getsecuritypatch)                           | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getSystemAvailableFeatures()](#getSystemAvailableFeatures)       | `Promise<string[]>` |  ❌  |   ✅    |   ❌    | ❌ |\n| [getSystemName()](#getsystemname)                                 | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getSystemVersion()](#getsystemversion)                           | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getTags()](#gettags)                                             | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getType()](#gettype)                                             | `Promise<string>`   |  ❌  |   ✅    |   ❌    | ❌ |\n| [getTotalDiskCapacity()](#gettotaldiskcapacity)                   | `Promise<number>`   |  ✅  |   ✅    |   ❌    | ✅ |\n| [getTotalMemory()](#gettotalmemory)                               | `Promise<number>`   |  ✅  |   ✅    |   ❌    | ✅ |\n| [getUniqueId()](#getuniqueid)                                     | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [getUsedMemory()](#getusedmemory)                                 | `Promise<number>`   |  ✅  |   ✅    |   ❌    | ✅ |\n| [getUserAgent()](#getuseragent)                                   | `Promise<string>`   |  ✅  |   ✅    |   ❌    | ✅ |\n| [getVersion()](#getversion)                                       | `string`            |  ✅  |   ✅    |   ✅    | ❌ |\n| [hasNotch()](#hasNotch)                                           | `boolean`           |  ✅  |   ✅    |   ✅    | ❌ |\n| [hasSystemFeature()](#hassystemfeaturefeature)                    | `Promise<boolean>`  |  ❌  |   ✅    |   ❌    | ❌ |\n| [isAirplaneMode()](#isairplanemode)                               | `Promise<boolean>`  |  ❌  |   ✅    |   ❌    | ✅ |\n| [isBatteryCharging()](#isbatterycharging)                         | `Promise<boolean>`  |  ✅  |   ✅    |   ❌    | ✅ |\n| [isEmulator()](#isemulator)                                       | `Promise<boolean>`  |  ✅  |   ✅    |   ✅    | ❌ |\n| [isLandscape()](#isLandscape)                                     | `Promise<boolean>`  |  ✅  |   ✅    |   ✅    | ❌ |\n| [isLocationEnabled()](#isLocationEnabled)                         | `Promise<boolean>`  |  ✅  |   ✅    |   ❌    | ✅ |\n| [isHeadphonesConnected()](#isHeadphonesConnected)                 | `Promise<boolean>`  |  ✅  |   ✅    |   ❌    | ❌ |\n| [isPinOrFingerprintSet()](#ispinorfingerprintset)                 | `Promise<boolean>`  |  ✅  |   ✅    |   ✅    | ❌ |\n| [isTablet()](#istablet)                                           | `boolean`           |  ✅  |   ✅    |   ✅    | ❌ |\n| [supported32BitAbis()](#supported32BitAbis)                       | `Promise<string[]>` |  ❌  |   ✅    |   ❌    | ❌ |\n| [supported64BitAbis()](#supported64BitAbis)                       | `Promise<string[]>` |  ❌  |   ✅    |   ❌    | ❌ |\n| [supportedAbis()](#supportedAbis)                                 | `Promise<string[]>` |  ✅  |   ✅    |   ❌    | ❌ |\n\n---\n\n### getApiLevel()\n\nGets the API level.\n\n#### Examples\n\n```js\nDeviceInfo.getApiLevel().then(apiLevel => {\n  // iOS: ?\n  // Android: 25\n  // Windows: ?\n});\n```\n\n#### Notes\n\n> See [API Levels](https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels)\n\n---\n\n### getAndroidId()\n\nGets the ANDROID_ID. See [API documentation](https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) for appropriate use.\n\n#### Examples\n\n```js\nDeviceInfo.getAndroidId().then(androidId => {\n  // androidId here\n});\n```\n\n---\n\n### getApplicationName()\n\nGets the application name.\n\n#### Examples\n\n```js\nlet appName = DeviceInfo.getApplicationName();\n// AwesomeApp\n```\n\n---\n\n### getBaseOs()\n\nThe base OS build the product is based on.\n\n#### Examples\n\n```js\nDeviceInfo.getBaseOs().then(baseOs => {\n  // \"Windows\", \"Android\" etc\n});\n```\n\n---\n\n### getBatteryLevel()\n\nGets the battery level of the device as a float comprised between 0 and 1.\n\n#### Examples\n\n```js\nDeviceInfo.getBatteryLevel().then(batteryLevel => {\n  // 0.759999\n});\n```\n\n#### Notes\n\n> To be able to get actual battery level enable battery monitoring mode for application.\n> Add this code:\n\n```objective-c\n[UIDevice currentDevice].batteryMonitoringEnabled = true;\n```\n\n> to AppDelegate.m application:didFinishLaunchingWithOptions:\n>\n> Returns -1 on the iOS Simulator\n\n---\n\n### getBootloader()\n\nThe system bootloader version number.\n\n#### Examples\n\n```js\nDeviceInfo.getBootloader().then(bootloader => {\n  // \"mw8998-002.0069.00\"\n});\n```\n\n---\n\n### getBrand()\n\nGets the device brand.\n\n#### Examples\n\n```js\nlet brand = DeviceInfo.getBrand();\n// iOS: \"Apple\"\n// Android: \"xiaomi\"\n// Windows: ?\n```\n\n---\n\n### getBuildNumber()\n\nGets the application build number.\n\n#### Examples\n\n```js\nlet buildNumber = DeviceInfo.getBuildNumber();\n// iOS: \"89\"\n// Android: \"4\"\n// Windows: ?\n```\n\n---\n\n### getBundleId()\n\nGets the application bundle identifier.\n\n#### Examples\n\n```js\nlet bundleId = DeviceInfo.getBundleId();\n// \"com.example.AwesomeApp\"\n```\n\n---\n\n### isCameraPresent()\n\nTells if the device have any camera now.\n\n#### Examples\n\n```js\nDeviceInfo.isCameraPresent()\n  .then(isCameraPresent => {\n    // true or false\n  })\n  .catch(cameraAccessException => {\n    // is thrown if a camera device could not be queried or opened by the CameraManager on Android\n  });\n```\n\n#### Notes\n\n> - Hot add/remove of camera is supported.\n> - Returns the status of the physical presence of the camera. If camera present but your app don't have permissions to use it, isCameraPresent will still return the true\n\n---\n\n### getCarrier()\n\nGets the carrier name (network operator).\n\n#### Examples\n\n```js\nDeviceInfo.getCarrier().then(carrier => {\n  // \"SOFTBANK\"\n});\n```\n\n---\n\n### getCodename()\n\nThe current development codename, or the string \"REL\" if this is a release build.\n\n#### Examples\n\n```js\nDeviceInfo.getCodename().then(codename => {\n  // \"REL\"\n});\n```\n\n---\n\n### getDevice()\n\nThe name of the industrial design.\n\n#### Examples\n\n```js\nDeviceInfo.getDevice().then(device => {\n  // \"walleye\"\n});\n```\n\n---\n\n### getDeviceId()\n\nGets the device ID.\n\n#### Examples\n\n```js\nlet deviceId = DeviceInfo.getDeviceId();\n// iOS: \"iPhone7,2\"\n// Android: \"goldfish\"\n// Windows: ?\n```\n\n---\n\n### getDisplay()\n\nA build ID string meant for displaying to the user.\n\n#### Examples\n\n```js\nDeviceInfo.getDisplay().then(display => {\n  // \"OPM2.171026.006.G1\"\n});\n```\n\n---\n\n### getDeviceName()\n\nGets the device name.\n\n#### Examples\n\n```js\nDeviceInfo.getDeviceName().then(deviceName => {\n  // iOS: \"Becca's iPhone 6\"\n  // Android: ?\n  // Windows: ?\n});\n```\n\nThis used to require the android.permission.BLUETOOTH but the new implementation in v3 does not need it. You may remove that from your AndroidManifest.xml if you had it for this API.\n\n---\n\n### getDeviceToken()\n\nGets the device token (see [DeviceCheck](https://developer.apple.com/documentation/devicecheck)). Only available for iOS 11.0+.\n\n#### Examples\n\n```js\nDeviceInfo.getDeviceToken().then(deviceToken => {\n  // iOS: \"a2Jqsd0kanz...\"\n});\n```\n\n\n---\n\n### getFirstInstallTime()\n\nGets the time at which the app was first installed, in milliseconds.\n\n#### Examples\n\n```js\nDeviceInfo.getFirstInstallTime().then(firstInstallTime => {\n  // Android: 1517681764528\n});\n```\n\n---\n\n### getFingerprint()\n\nA string that uniquely identifies this build.\n\n#### Examples\n\n```js\nDeviceInfo.getFingerprint().then(fingerprint => {\n  // \"google/walleye/walleye:8.1.0/OPM2.171026.006.G1/4820017:user/release-keys\"\n});\n```\n\n---\n\n### getFontScale()\n\nGets the device font scale.\nThe font scale is the ratio of the current system font to the \"normal\" font size, so if normal text is 10pt and the system font is currently 15pt, the font scale would be 1.5\nThis can be used to determine if accessability settings has been changed for the device; you may want to re-layout certain views if the font scale is significantly larger ( > 2.0 )\n\nIn iOS App Extensions this call always returns 1.0, see #625.\n\n#### Examples\n\n```js\nDeviceInfo.getFontScale().then(fontScale => {\n  // 1.2\n});\n```\n\n---\n\n### getFreeDiskStorage()\n\nGets available storage size, in bytes.\n\n#### Examples\n\n```js\nDeviceInfo.getFreeDiskStorage().then(freeDiskStorage => {\n  // Android: 17179869184\n  // iOS: 17179869184\n});\n```\n\n#### Notes\n\n> From [developer.android.com](<https://developer.android.com/reference/android/os/Environment.html#getExternalStorageDirectory()>):\n>\n> Return the primary shared/external storage directory.\n>\n> Note: don't be confused by the word \"external\" here. This directory can better be thought as\n> media/shared storage. It is a filesystem that can hold a relatively large amount of data and\n> that is shared across all applications (does not enforce permissions). Traditionally this is\n> an SD card, but it may also be implemented as built-in storage in a device that is distinct\n> from the protected internal storage and can be mounted as a filesystem on a computer.\n\n---\n\n### getHardware()\n\nThe name of the hardware (from the kernel command line or /proc).\n\n#### Examples\n\n```js\nDeviceInfo.getHardware().then(hardware => {\n  // \"walleye\"\n};\n```\n\n---\n\n### getHost()\n\nHostname\n\n#### Examples\n\n```js\nDeviceInfo.getHost().then(host => {\n  // \"wprd10.hot.corp.google.com\"\n});\n```\n\n---\n\n### getIpAddress()\n\n**Deprecated** Gets the device current IP address. (of wifi only)\nSwitch to @react-native-community/netinfo or react-native-network-info\n\n#### Examples\n\n```js\nDeviceInfo.getIpAddress().then(ip => {\n  // \"92.168.32.44\"\n});\n```\n\n#### Android Permissions\n\n- [android.permission.ACCESS_WIFI_STATE](https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE)\n\n#### Notes\n\n> Support for iOS was added in 0.22.0\n\n---\n\n### getIncremental()\n\nThe internal value used by the underlying source control to represent this build.\n\n#### Examples\n\n```js\nDeviceInfo.getIncremental().then(incremental => {\n  // \"4820017\"\n});\n```\n\n---\n\n### getInstallReferrer()\n\nGets the referrer string upon application installation.\n\n#### Examples\n\n```js\nDeviceInfo.getInstallReferrer().then(installReferrer => {\n  // If the app was installed from https://play.google.com/store/apps/details?id=com.myapp&referrer=my_install_referrer\n  // the result will be \"my_install_referrer\"\n});\n```\n\n---\n\n### getInstanceId()\n\nGets the application instance ID.\n\n#### Examples\n\n```js\nDeviceInfo.getInstanceId().then(instanceId => {\n  // Android: ?\n});\n```\n\n#### Notes\n\n> See https://developers.google.com/instance-id/\n\n---\n\n### getLastUpdateTime()\n\nGets the time at which the app was last updated, in milliseconds.\n\n#### Examples\n\n```js\nDeviceInfo.getLastUpdateTime().then(lastUpdateTime => {\n  // Android: 1517681764992\n});\n```\n\n---\n\n### getMacAddress()\n\nGets the network adapter MAC address.\n\n#### Examples\n\n```js\nDeviceInfo.getMacAddress().then(mac => {\n  // \"E5:12:D8:E5:69:97\"\n});\n```\n\n#### Android Permissions\n\n- [android.permission.ACCESS_WIFI_STATE](https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_WIFI_STATE)\n\n#### Notes\n\n> iOS: This method always return \"02:00:00:00:00:00\" as retrieving the MAC address is [disabled since iOS 7](https://developer.apple.com/library/archive/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW34)\n\n---\n\n### getManufacturer()\n\nGets the device manufacturer.\n\n#### Examples\n\n```js\nDeviceInfo.getManufacturer().then(manufacturer => {\n  // iOS: \"Apple\"\n  // Android: \"Google\"\n  // Windows: ?\n});\n```\n\n---\n\n### getMaxMemory()\n\nReturns the maximum amount of memory that the VM will attempt to use, in bytes.\n\n#### Examples\n\n```js\nDeviceInfo.getMaxMemory().then(maxMemory => {\n  // 402653183\n});\n```\n\n---\n\n### getModel()\n\nGets the device model.\n\n**iOS warning:** The list with device names is maintained by the community and could lag new devices. It is recommended to use `getDeviceId()` since it's more reliable and always up-to-date with new iOS devices. We do accept pull requests that add new iOS devices to the list with device names.\n\n#### Examples\n\n```js\nlet model = DeviceInfo.getModel();\n// iOS: ?\n// Android: ?\n// Windows: ?\n```\n\n---\n\n### getPhoneNumber()\n\nGets the device phone number.\n\n#### Examples\n\n```js\nDeviceInfo.getPhoneNumber().then(phoneNumber => {\n  // Android: null return: no permission, empty string: unprogrammed or empty SIM1, e.g. \"+15555215558\": normal return value\n});\n```\n\n#### Android Permissions\n\n- [android.permission.READ_PHONE_STATE](https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE)\n\n#### Notes\n\n> This can return `undefined` in certain cases and should not be relied on. [SO entry on the subject](https://stackoverflow.com/questions/2480288/programmatically-obtain-the-phone-number-of-the-android-phone#answer-2480307).\n\n---\n\n### getPowerState()\n\nGets the power state of the device including the battery level, whether it is plugged in, and if the system is currently operating in low power mode.\nDisplays a warning on iOS if battery monitoring not enabled, or if attempted on an emulator (where monitoring is not possible)\n\n#### Examples\n\n```js\nDeviceInfo.getPowerState().then(state => {\n  // {\n  //   batteryLevel: 0.759999,\n  //   batteryState: 'unplugged',\n  //   lowPowerMode: false,\n  // }\n});\n```\n\n---\n\n### getProduct()\n\nThe name of the overall product.\n\n#### Examples\n\n```js\nDeviceInfo.getProduct().then(product => {\n  // \"walleye\"\n});\n```\n\n---\n\n### getPreviewSdkInt()\n\nThe developer preview revision of a prerelease SDK.\n\n#### Examples\n\n```js\nDeviceInfo.getPreviewSdkInt().then(previewSdkInt => {\n  // 0\n});\n```\n\n---\n\n### getReadableVersion()\n\nGets the application human readable version (same as getVersion() + '.' + getBuildNumber())\n\n#### Examples\n\n```js\nlet readableVersion = DeviceInfo.getReadableVersion();\n// iOS: 1.0.1.32\n// Android: 1.0.1.234\n// Windows: ?\n```\n\n---\n\n### getSerialNumber()\n\nGets the device serial number. Will be 'unknown' in almost all cases [unless you have a privileged app and you know what you're doing](<https://developer.android.com/reference/android/os/Build.html#getSerial()>).\n\n#### Examples\n\n```js\nDeviceInfo.getSerialNumber().then(serialNumber => {\n  // iOS: unknown\n  // Android: ? (maybe a serial number, if your app is privileged)\n  // Windows: unknown\n});\n```\n\n---\n\n### getSecurityPatch()\n\nThe user-visible security patch level.\n\n#### Examples\n\n```js\nDeviceInfo.getSecurityPatch().then(securityPatch => {\n  // \"2018-07-05\"\n});\n```\n\n---\n\n### getSystemName()\n\nGets the device OS name.\n\n#### Examples\n\n```js\nlet systemName = DeviceInfo.getSystemName();\n// iOS: \"iOS\" on newer iOS devices \"iPhone OS\" on older devices, including older iPad's.\n// Android: \"Android\"\n// Windows: ?\n```\n\n---\n\n### getSystemVersion()\n\nGets the device OS version.\n\n#### Examples\n\n```js\nlet systemVersion = DeviceInfo.getSystemVersion();\n// iOS: \"11.0\"\n// Android: \"7.1.1\"\n// Windows: ?\n```\n\n---\n\n### getBuildId()\n\nGets build number of the operating system.\n\n#### Examples\n\n```js\nDeviceInfo.getBuildId().then(buildId => {\n  // iOS: \"12A269\"\n  // tvOS: not available\n  // Android: \"13D15\"\n  // Windows: not available\n});\n```\n\n---\n\n### getTags()\n\nComma-separated tags describing the build.\n\n#### Examples\n\n```js\nDeviceInfo.getTags().then(tags => {\n  // \"release-keys, unsigned, debug\",\n});\n```\n\n---\n\n### getType()\n\nThe type of build.\n\n#### Examples\n\n```js\nDeviceInfo.getType().then(type => {\n  // \"user\", \"eng\"\n});\n```\n\n---\n\n### getTotalDiskCapacity()\n\nGets full disk storage size, in bytes.\n\n#### Examples\n\n```js\nDeviceInfo.getTotalDiskCapacity().then(capacity => {\n  // Android: 17179869184\n  // iOS: 17179869184\n});\n```\n\n---\n\n### getTotalMemory()\n\nGets the device total memory, in bytes.\n\n#### Examples\n\n```js\nDeviceInfo.getTotalMemory().then(totalMemory => {\n  // 1995018240\n});\n```\n\n---\n\n### getUniqueId()\n\nThis is a constant and may be referenced directly\n\nGets the device unique ID.\nOn Android it is currently identical to `getAndroidId()` in this module.\nOn iOS it uses the `DeviceUID` uid identifier.\nOn Windows it uses `Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation.id`.\n\n#### Examples\n\n```js\nlet uniqueId = DeviceInfo.getUniqueId();\n// iOS: \"FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\"\n// Android: \"dd96dec43fb81c97\"\n// Windows: ?\n```\n\n#### Notes\n\n> - iOS: This is [`IDFV`](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor) or a random string if IDFV is unavaliable. Once UID is generated it is stored in iOS Keychain and NSUserDefaults. So it would stay the same even if you delete the app or reset IDFV. You can _carefully_ consider it a persistent, cross-install unique ID. It can be changed only in case someone manually override values in Keychain/NSUserDefaults or if Apple would change Keychain and NSUserDefaults implementations.\n>   Beware: The IDFV is calculated using your bundle identifier and thus will be different in app extensions.\n> - android: Prior to Oreo, this id ([ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID)) will always be the same once you set up your phone.\n\n---\n\n### getUsedMemory()\n\nGets the app memory usage, in bytes.\n\n#### Examples\n\n```js\nDeviceInfo.getUsedMemory().then(usedMemory => {\n  // 23452345\n});\n```\n\n---\n\n### getUserAgent()\n\nGets the device User Agent.\n\n#### Examples\n\n```js\nDeviceInfo.getUserAgent().then(userAgent => {\n  // iOS: \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143\"\n  // tvOS: not available\n  // Android: ?\n  // Windows: ?\n});\n```\n\n---\n\n### getVersion()\n\nGets the application version.\n\n#### Examples\n\n```js\nlet version = DeviceInfo.getVersion();\n// iOS: \"1.0\"\n// Android: \"1.0\"\n// Windows: ?\n```\n\n---\n\n### isAirplaneMode()\n\nTells if the device is in Airplane Mode.\n\n#### Examples\n\n```js\nDeviceInfo.isAirplaneMode().then(airplaneModeOn => {\n  // false\n});\n```\n\n#### Notes\n\n> - This only works if the remote debugger is disabled.\n\n---\n\n### isBatteryCharging()\n\nTells if the battery is currently charging.\n\n#### Examples\n\n```js\nDeviceInfo.isBatteryCharging().then(isCharging => {\n  // true or false\n});\n```\n\n---\n\n### isEmulator()\n\nTells if the application is running in an emulator.\n\n#### Examples\n\n```js\nDeviceInfo.isEmulator().then(isEmulator => {\n  // false\n});\n```\n\n---\n\n### isPinOrFingerprintSet()\n\nTells if a PIN number or a fingerprint was set for the device.\n\n#### Examples\n\n```js\nDeviceInfo.isPinOrFingerprintSet().then(isPinOrFingerprintSet => {\n  if (!isPinOrFingerprintSet) {\n    // ...\n  }\n});\n```\n\n---\n\n### isTablet()\n\nTells if the device is a tablet.\n\n#### Examples\n\n```js\nlet isTablet = DeviceInfo.isTablet();\n// true\n```\n\n---\n\n### isLandscape()\n\nTells if the device is currently in landscape mode.\n\n#### Examples\n\n```js\nDeviceInfo.isLandscape().then(isLandscape => {\n  // true\n});\n```\n\n---\n\n### hasNotch()\n\nTells if the device has a notch.\n\n#### Examples\n\n```js\nlet hasNotch = DeviceInfo.hasNotch();\n  // true\n```\n\n---\n\n### getDeviceType()\n\nReturns the device's type as a string, which will be one of:\n\n- `Handset`\n- `Tablet`\n- `Tv`\n- `unknown`\n\n#### Examples\n\n```js\nlet type = DeviceInfo.getDeviceType();\n// 'Handset'\n```\n\n---\n\n### supported32BitAbis()\n\nAn ordered list of 32 bit ABIs supported by this device.\n\n#### Examples\n\n```js\nDeviceInfo.supported32BitAbis().then(abis => {\n  // [\"armeabi-v7a\", \"armeabi\"]\n});\n```\n\n---\n\n### supported64BitAbis()\n\nAn ordered list of 64 bit ABIs supported by this device.\n\n#### Examples\n\n```js\nDeviceInfo.supported64BitAbis().then(abis => {\n  // [\"arm64-v8a\"]\n});\n```\n\n---\n\n### supportedAbis()\n\nReturns a list of supported processor architecture version\n\n#### Examples\n\n```js\nDeviceInfo.supportedAbis().then(abis => {\n  // [ \"arm64 v8\", \"Intel x86-64h Haswell\", \"arm64-v8a\", \"armeabi-v7a\", \"armeabi\" ]\n});\n```\n\n---\n\n### hasSystemFeature(feature)\n\nTells if the device has a specific system feature.\n\n#### Examples\n\n```js\nDeviceInfo.hasSystemFeature('amazon.hardware.fire_tv').then(hasFeature => {\n  // true or false\n});\n```\n\n---\n\n### getSystemAvailableFeatures()\n\nReturns a list of available system features on Android.\n\n#### Examples\n\n```js\nDeviceInfo.getSystemAvailableFeatures().then(features => {\n  // [\"android.software.backup\", \"android.hardware.screen.landscape\", \"android.hardware.wifi\", ...]\n});\n```\n\n### isLocationEnabled()\n\nTells if the device has location services turned off at the device-level (NOT related to app-specific permissions)\n\n#### Examples\n\n```js\nDeviceInfo.isLocationEnabled().then(enabled => {\n  // true or false\n});\n```\n\n### isHeadphonesConnected()\n\nTells if the device is connected to wired headset or bluetooth headphones\n\n#### Examples\n\n```js\nDeviceInfo.isHeadphonesConnected().then(enabled => {\n  // true or false\n})\n```\n\n### getAvailableLocationProviders()\n\nReturns an object of **platform-specfic** location providers/servcies, with `boolean` value whether or not they are currently available.\n\n> NOTE: This function requires access to the Location permission on Android\n\n#### Android Example\n\n```js\nDeviceInfo.getAvailableLocationProviders().then(providers => {\n  // {\n  //   gps: true\n  //   network: true\n  //   passive: true\n  // }\n});\n```\n\n#### iOS Example\n\n```js\nDeviceInfo.getAvailableLocationProviders().then(providers => {\n  // {\n  //   headingAvailable: false\n  //   isRangingAvailable: false\n  //   locationServicesEnabled: true\n  //   significantLocationChangeMonitoringAvailable: true\n  // }\n});\n```\n\n## Hooks & Events\n\nCurrently iOS & Android only (web support for battery/charging-related APIs).\n\n### useBatteryLevel or RNDeviceInfo_batteryLevelDidChange\n\nFired when the battery level changes; sent no more frequently than once per minute.\n\n#### Examples\n\n```js\nimport { useBatteryLevel } from 'react-native-device-info'\n\nconst batteryLevel = useBatteryLevel(); // 0.759999\n\n<Text>{ batteryLevel }</Text>\n```\n\n```js\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\ndeviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelDidChange', level => {\n  // 0.759999\n});\n```\n\n---\n\n### useBatteryLevelIsLow or RNDeviceInfo_batteryLevelIsLow\n\nFired when the battery drops is considered low\n\n| Platform | Percentage |\n| -------- | ---------- |\n| iOS      | 20         |\n| Android  | 15         |\n| Web      | 20         |\n\n#### Examples\n\n```js\nimport { useBatteryLevelIsLow } from 'react-native-device-info'\n\nconst batteryLevelIsLow = useBatteryLevelIsLow(); // 0.19\n\n<Text>{ batteryLevelIsLow }</Text>\n```\n\n```js\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\ndeviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', level => {\n  // 0.19\n});\n```\n\n---\n\n### usePowerState or RNDeviceInfo_powerStateDidChange\n\nFired when the battery state changes, for example when the device enters charging mode or is unplugged.\n\n#### Examples\n\n```js\nimport { usePowerState } from 'react-native-device-info'\n\nconst powerState = usePowerState(); // 'charging'\n\n<Text>{ powerState }</Text>\n```\n\n```js\nimport { NativeEventEmitter, NativeModules } from 'react-native'\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo)\n\ndeviceInfoEmitter.addListener('RNDeviceInfo_powerStateDidChange', { batteryState } => {\n  // 'charging'\n});\n```\n\n---\n\n### useFirstInstallTime\n\nGets the time at which the app was first installed, in milliseconds.\n\n#### Example\n\n```jsx\nimport { usePowerState } from 'react-native-device-info';\n\nconst { loading, result } = useFirstInstallTime(); // { loading: true, result: 1517681764528}\n\n<Text>{loading ? 'loading...' : result}</Text>;\n```\n\n---\n\n### useDeviceName\n\nGets the device name.\n\n#### Example\n\n```jsx\nimport { useDeviceName } from 'react-native-device-info';\n\nconst { loading, result } = useDeviceName(); // { loading: true, result: \"Becca's iPhone 6\"}\n\n<Text>{loading ? 'loading...' : result}</Text>;\n```\n\n---\n\n### useHasSystemFeature\n\nTells if the device has a specific system feature.\n\n#### Example\n\n```jsx\nimport { useHasSystemFeature } from 'react-native-device-info';\n\nconst { loading, result } = useHasSystemFeature('amazon.hardware.fire_tv'); // { loading: true, result: false }\n\n<Text>{loading ? 'loading...' : result}</Text>;\n```\n\n---\n\n### useIsEmulator\n\nGet whether the application is running in an emulator.\n\n#### Example\n\n```jsx\nimport { useIsEmulator } from 'react-native-device-info';\n\nconst { loading, result } = useIsEmulator(); // { loading: true, result: false }\n\n<Text>{loading ? 'loading...' : result}</Text>;\n```\n\n=======\n## Native interoperatibily\n\nIf you need to check for device type from the native side, you can use the following:\n```java\nimport com.learnium.resolver.DeviceTypeResolver\n\n...\ndeviceTypeResolver = new DeviceTypeResolver(context);\n...\n//Check if the device is a Tablet:\nif(deviceTypeResolver.isTablet){\n  ...\n}else{\n  ...\n}\n```\n\n\n\n\n## Troubleshooting\n\nWhen installing or using `react-native-device-info`, you may encounter the following problems:\n\n<details>\n  <summary>[android] - Unable to merge dex / Multiple dex files / Problems with `com.google.android.gms`</summary>\n\n`react-native-device-info` uses `com.google.android.gms:play-services-gcm` to provide [getInstance()][#getinstance].\nThis can lead to conflicts when building the Android application.\n\nIf you're using a different version of `com.google.android.gms:play-services-gcm` in your app, you can define the\n`googlePlayServicesVersion` gradle variable in your `build.gradle` file to tell `react-native-device-info` what version\nit should require. See the example project included here for a sample.\n\nIf you're using a different library that conflicts with `com.google.android.gms:play-services-gcm`, and you are certain you know what you are doing such that you will avoid version conflicts, you can simply\nignore this dependency in your gradle file:\n\n```groovy\n compile(project(':react-native-device-info')) {\n    exclude group: 'com.google.android.gms'\n}\n```\n\n</details>\n\n<details>\n  <summary>[ios] - ld: library not found for -lRNDeviceInfo-tvOS</summary>\n\nSeems to be a bug caused by `react-native link`. You can manually delete `libRNDeviceInfo-tvOS.a` in `Xcode -> [Your iOS build target] -> Build Phrases -> Link Binary with Libraries`.\n\n</details>\n\n<details>\n  <summary>[ios] - [NetworkInfo] Descriptors query returned error: Error Domain=NSCocoaErrorDomain Code=4099\n “The connection to service named com.apple.commcenter.coretelephony.xpc was invalidated.”</summary>\n\nThis is a system level log that may be turned off by executing:\n`xcrun simctl spawn booted log config --mode \"level:off\" --subsystem com.apple.CoreTelephony`.\nTo undo the command, you can execute:\n`xcrun simctl spawn booted log config --mode \"level:info\" --subsystem com.apple.CoreTelephony`\n\n</details>\n\n<details>\n  <summary>[ios] - Multiple versions of React when using CocoaPods\n  \"tries to require 'react-native' but there are several files providing this module\"</summary>\n\n### RN<=59 You may need to adjust your Podfile like this if you use Cocoapods and have undefined symbols or duplicate React definitions\n\n```ruby\ntarget 'yourTargetName' do\n  # See http://facebook.github.io/react-native/docs/integration-with-existing-apps.html#configuring-cocoapods-dependencies\n  pod 'React', :path => '../node_modules/react-native', :subspecs => [\n    'Core',\n    'CxxBridge', # Include this for RN >= 0.47\n    'DevSupport', # Include this to enable In-App Devmenu if RN >= 0.43\n    'RCTText',\n    'RCTNetwork',\n    'RCTWebSocket', # Needed for debugging\n    'RCTAnimation', # Needed for FlatList and animations running on native UI thread\n    # Add any other subspecs you want to use in your project\n  ]\n\n  # Explicitly include Yoga if you are using RN >= 0.42.0\n  pod 'yoga', :path => '../node_modules/react-native/ReactCommon/yoga'\n\n  # Third party deps podspec link - you may have multiple pods here, just an example\n  pod 'RNDeviceInfo', path: '../node_modules/react-native-device-info'\n\nend\n\n# if you see errors about React duplicate definitions, this fixes it. The same works for yoga.\npost_install do |installer|\n  installer.pods_project.targets.each do |target|\n    if target.name == \"React\"\n      target.remove_from_project\n    end\n  end\nend\n```\n\n</details>\n\n<details>\n  <summary>[tests] - Cannot run my test suite when using this library</summary>\n\n`react-native-device-info` contains native code, and needs to be mocked. Jest Snapshot support may work though.\n\nHere's how to do it with jest for example:\n\n```json\n// in your package.json:\n\"jest\": {\n  \"setupFiles\": [\n    \"./testenv.js\"\n  ],\n```\n\n```js\n// testenv.js:\njest.mock('react-native-device-info', () => {\n  return {\n    getModel: jest.fn(),\n  };\n});\n```\n\n</details>\n<details>\n    <summary>[warnings] - I get too many warnings (battery state, etc)</summary>\n\nSome of the APIs (like getBatteryState) will throw warnings in certain conditions like on tvOS or the iOS emulator. This won't be visible in production but even in development it may be irritating. It is useful to have the warnings because these devices return no state, and that can be surprising, leading to github support issues. The warnings is intended to educate you as a developer. If the warnings are troublesome you may try this in your code to suppress them:\n\n```javascript\nimport { YellowBox } from 'react-native';\nYellowBox.ignoreWarnings(['Battery state']);\n```\n\n</details>\n\n## Release Notes\n\nSee the [CHANGELOG.md](https://github.com/react-native-community/react-native-device-info/blob/master/CHANGELOG.md).\n\n## Contributing\n\nPlease see the [`contributing guide`](/CONTRIBUTING.md).\n\n## react-native-dom\n\nAs a courtesy to developers, this library was made compatible in v0.21.6 with [react-native-dom](https://github.com/vincentriemer/react-native-dom) and [react-native-web](https://github.com/necolas/react-native-web) by providing an empty polyfill in order to avoid breaking builds.\n\nOnly [getUserAgent()](#getuseragent) will return a correct value. All other API methods will return an \"empty\" value of its documented return type: `0` for numbers, `''` for strings, `false` for booleans.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-native-community/react-native-device-info.git"
  },
  "scripts": {
    "analyze": "yarn ts-check && yarn flow-check",
    "build": "bob build",
    "clean": "cd example && npx react-native-clean-project --keep-node-modules --remove-iOS-build --remove-iOS-pods --remove-android-build --keep-brew --keep-pods && \\rm -fr ios/Pods",
    "dev-sync": "yarn build && cp -r *podspec lib windows android ios src example/node_modules/react-native-device-info/",
    "flow-check": "npx flow-bin check-contents < src/index.js.flow",
    "lint": "npx eslint ./ --ignore-pattern example --ignore-pattern node_modules --fix --quiet",
    "precommit": "lint-staged && yarn analyze",
    "prepare": "yarn build",
    "shipit": "yarn clean && np",
    "test": "echo no tests defined",
    "ts-check": "npx tsc --noEmit"
  },
  "types": "lib/typescript/index.d.ts",
  "version": "5.4.1"
}
